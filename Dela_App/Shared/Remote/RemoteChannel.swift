//
//  ChannelBuilder.swift
//  Dela
//
//  Created by Alexander Herlin on 2021-01-15.
//

import Foundation
import GRPC
import Logging
import NIOHPACK
import NIO

class RemoteChannel {

    let clientConnection: ClientConnection
    let clientConfiguration: ClientConnection.Configuration
    let defaultCallOptions: CallOptions
    private let group: MultiThreadedEventLoopGroup

    static var shared = RemoteChannel()

    init() {
        group = MultiThreadedEventLoopGroup(numberOfThreads: 5)
        clientConfiguration = ClientConnection.Configuration(
            target: .hostAndPort(InfoKey.apiUrl.value, Int(InfoKey.apiPort.value) ?? 0),
            eventLoopGroup: group,
            connectivityStateDelegate: ConnectivityHandler())

        clientConnection = ClientConnection(configuration: clientConfiguration)
        print("Adress: \(InfoKey.apiUrl.value):\(Int(InfoKey.apiPort.value) ?? 0)")
        print("Connection Status=>:\(clientConnection.connectivity.state)")

        defaultCallOptions = CallOptions(
            customMetadata: HPACKHeaders([("x-user", UUID().uuidString)]),
            timeLimit: .none,
            messageEncoding: .disabled,
            requestIDProvider: CallOptions.RequestIDProvider.autogenerated,
            requestIDHeader: UUID().uuidString,
            cacheable: false,
            logger: Logger(label: "io.grpc", factory: { _ in SwiftLogNoOpLogHandler() }))
    }

    deinit {
        do {
            try group.syncShutdownGracefully()
        } catch {}
    }
}
